// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=./usecase/repository/repository.go -destination=./mock/repository/repository.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/nobbyphala/Brick/domain"
	database "github.com/nobbyphala/Brick/external/database"
	repository "github.com/nobbyphala/Brick/usecase/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockDisbursement is a mock of Disbursement interface.
type MockDisbursement struct {
	ctrl     *gomock.Controller
	recorder *MockDisbursementMockRecorder
}

// MockDisbursementMockRecorder is the mock recorder for MockDisbursement.
type MockDisbursementMockRecorder struct {
	mock *MockDisbursement
}

// NewMockDisbursement creates a new mock instance.
func NewMockDisbursement(ctrl *gomock.Controller) *MockDisbursement {
	mock := &MockDisbursement{ctrl: ctrl}
	mock.recorder = &MockDisbursementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisbursement) EXPECT() *MockDisbursementMockRecorder {
	return m.recorder
}

// GetByTransactionId mocks base method.
func (m *MockDisbursement) GetByTransactionId(ctx context.Context, bankTransactionId string) (*domain.Disbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransactionId", ctx, bankTransactionId)
	ret0, _ := ret[0].(*domain.Disbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransactionId indicates an expected call of GetByTransactionId.
func (mr *MockDisbursementMockRecorder) GetByTransactionId(ctx, bankTransactionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransactionId", reflect.TypeOf((*MockDisbursement)(nil).GetByTransactionId), ctx, bankTransactionId)
}

// Insert mocks base method.
func (m *MockDisbursement) Insert(ctx context.Context, disbursement domain.Disbursement) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, disbursement)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockDisbursementMockRecorder) Insert(ctx, disbursement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDisbursement)(nil).Insert), ctx, disbursement)
}

// UpdateById mocks base method.
func (m *MockDisbursement) UpdateById(ctx context.Context, id string, updatedData domain.Disbursement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, id, updatedData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockDisbursementMockRecorder) UpdateById(ctx, id, updatedData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockDisbursement)(nil).UpdateById), ctx, id, updatedData)
}

// WithTx mocks base method.
func (m *MockDisbursement) WithTx(Tx database.SQLDatabase) repository.Disbursement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", Tx)
	ret0, _ := ret[0].(repository.Disbursement)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockDisbursementMockRecorder) WithTx(Tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockDisbursement)(nil).WithTx), Tx)
}

// MockUtils is a mock of Utils interface.
type MockUtils struct {
	ctrl     *gomock.Controller
	recorder *MockUtilsMockRecorder
}

// MockUtilsMockRecorder is the mock recorder for MockUtils.
type MockUtilsMockRecorder struct {
	mock *MockUtils
}

// NewMockUtils creates a new mock instance.
func NewMockUtils(ctrl *gomock.Controller) *MockUtils {
	mock := &MockUtils{ctrl: ctrl}
	mock.recorder = &MockUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtils) EXPECT() *MockUtilsMockRecorder {
	return m.recorder
}

// RunWithTransaction mocks base method.
func (m *MockUtils) RunWithTransaction(ctx context.Context, handler func(database.SQLDatabase) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithTransaction", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithTransaction indicates an expected call of RunWithTransaction.
func (mr *MockUtilsMockRecorder) RunWithTransaction(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithTransaction", reflect.TypeOf((*MockUtils)(nil).RunWithTransaction), ctx, handler)
}
